//
//  keys.hpp
//  grace
//
//  Created by Simon Ask Ulsnes on 14/05/13.
//  Copyright (c) 2013 Simon Ask Consulting. All rights reserved.
//

#ifndef grace_keys_hpp
#define grace_keys_hpp

#include "base/basic.hpp"

// TODO: Make independent on SDL.

#if defined(__APPLE__)
#include <SDL2/SDL_keyboard.h>
#else
#include <SDL_keyboard.h>
#endif

namespace grace {
	enum class Key : uint32 {
		Unknown = SDLK_UNKNOWN,
		
		Return = SDLK_RETURN,
		Escape = SDLK_ESCAPE,
		Backspace = SDLK_BACKSPACE,
		Tab = SDLK_TAB,
		Space = SDLK_SPACE,
		Exclaim = SDLK_EXCLAIM,
		DoubleQuote = SDLK_QUOTEDBL,
		Hash = SDLK_HASH,
		Percent = SDLK_PERCENT,
		Dollar = SDLK_DOLLAR,
		Ampersand = SDLK_AMPERSAND,
		Quote = SDLK_QUOTE,
		LeftParen = SDLK_LEFTPAREN,
		RightParen = SDLK_RIGHTPAREN,
		Asterisk = SDLK_ASTERISK,
		Plus = SDLK_PLUS,
		Comma = SDLK_COMMA,
		Minus = SDLK_MINUS,
		Period = SDLK_PERIOD,
		Slash = SDLK_SLASH,
		N0 = SDLK_0,
		N1 = SDLK_1,
		N2 = SDLK_2,
		N3 = SDLK_3,
		N4 = SDLK_4,
		N5 = SDLK_5,
		N6 = SDLK_6,
		N7 = SDLK_7,
		N8 = SDLK_8,
		N9 = SDLK_9,
		Colon = SDLK_COLON,
		Semicolon = SDLK_SEMICOLON,
		Less = SDLK_LESS,
		Equals = SDLK_EQUALS,
		Greater = SDLK_GREATER,
		Question = SDLK_QUESTION,
		At = SDLK_AT,
		LeftBracket = SDLK_LEFTBRACKET,
		Backslash = SDLK_BACKSLASH,
		RightBracket = SDLK_RIGHTBRACKET,
		Caret = SDLK_CARET,
		Underscore = SDLK_UNDERSCORE,
		Backquote = SDLK_BACKQUOTE,
		A = SDLK_a,
		B = SDLK_b,
		C = SDLK_c,
		D = SDLK_d,
		E = SDLK_e,
		F = SDLK_f,
		G = SDLK_g,
		H = SDLK_h,
		I = SDLK_i,
		J = SDLK_j,
		K = SDLK_k,
		L = SDLK_l,
		M = SDLK_m,
		N = SDLK_n,
		O = SDLK_o,
		P = SDLK_p,
		Q = SDLK_q,
		R = SDLK_r,
		S = SDLK_s,
		T = SDLK_t,
		U = SDLK_u,
		V = SDLK_v,
		W = SDLK_w,
		X = SDLK_x,
		Y = SDLK_y,
		Z = SDLK_z,
		
		CapsLock = SDLK_CAPSLOCK,
		
		F1 = SDLK_F1,
		F2 = SDLK_F2,
		F3 = SDLK_F3,
		F4 = SDLK_F4,
		F5 = SDLK_F5,
		F6 = SDLK_F6,
		F7 = SDLK_F7,
		F8 = SDLK_F8,
		F9 = SDLK_F9,
		F10 = SDLK_F10,
		F11 = SDLK_F11,
		F12 = SDLK_F12,
		
		PrintScreen = SDLK_PRINTSCREEN,
		ScrollLock = SDLK_SCROLLLOCK,
		Pause = SDLK_PAUSE,
		Insert = SDLK_INSERT,
		Home = SDLK_HOME,
		PageUp = SDLK_PAGEUP,
		Delete = SDLK_DELETE,
		End = SDLK_END,
		PageDown = SDLK_PAGEDOWN,
		Right = SDLK_RIGHT,
		Left = SDLK_LEFT,
		Down = SDLK_DOWN,
		Up = SDLK_UP,
		
		NumLockClear = SDLK_NUMLOCKCLEAR,
		KeyPadDivide = SDLK_KP_DIVIDE,
		KeyPadMultiply = SDLK_KP_MULTIPLY,
		KeyPadMinus = SDLK_KP_MINUS,
		KeyPadPlus = SDLK_KP_PLUS,
		KeyPadEnter = SDLK_KP_ENTER,
		KeyPad1 = SDLK_KP_1,
		KeyPad2 = SDLK_KP_2,
		KeyPad3 = SDLK_KP_3,
		KeyPad4 = SDLK_KP_4,
		KeyPad5 = SDLK_KP_5,
		KeyPad6 = SDLK_KP_6,
		KeyPad7 = SDLK_KP_7,
		KeyPad8 = SDLK_KP_8,
		KeyPad9 = SDLK_KP_9,
		KeyPad0 = SDLK_KP_0,
		KeyPadPeriod = SDLK_KP_PERIOD,
		
		//SDLK_APPLICATION,
		//SDLK_POWER,
		KeyPadEquals = SDLK_KP_EQUALS,
		F13 = SDLK_F13,
		F14 = SDLK_F14,
		F15 = SDLK_F15,
		F16 = SDLK_F16,
		F17 = SDLK_F17,
		F18 = SDLK_F18,
		F19 = SDLK_F19,
		F20 = SDLK_F20,
		F21 = SDLK_F21,
		F22 = SDLK_F22,
		F23 = SDLK_F23,
		F24 = SDLK_F24,
		Execute = SDLK_EXECUTE,
		//SDLK_HELP,
		//SDLK_MENU,
		//SDLK_SELECT,
		//SDLK_STOP,
		//SDLK_AGAIN,
		//SDLK_UNDO,
		//SDLK_CUT,
		//SDLK_COPY,
		//SDLK_PASTE,
		//SDLK_FIND,
		//SDLK_MUTE,
		//SDLK_VOLUMEUP,
		//SDLK_VOLUMEDOWN,
		KeyPadComma = SDLK_KP_COMMA,
		//SDLK_KP_EQUALSAS400,
		
		//SDLK_ALTERASE,
		//SDLK_SYSREQ,
		//SDLK_CANCEL,
		//SDLK_CLEAR,
		//SDLK_PRIOR,
		//SDLK_RETURN2,
		//SDLK_SEPARATOR,
		//SDLK_OUT,
		//SDLK_OPER,
		//SDLK_CLEARAGAIN,
		//SDLK_CRSEL,
		//SDLK_EXSEL,
		
		//SDLK_KP_00,
		//SDLK_KP_000,
		//SDLK_THOUSANDSSEPARATOR,
		//SDLK_DECIMALSEPARATOR,
		//SDLK_CURRENCYUNIT,
		//SDLK_CURRENCYSUBUNIT,
		//SDLK_KP_LEFTPAREN,
		//SDLK_KP_RIGHTPAREN,
		//SDLK_KP_LEFTBRACE,
		//SDLK_KP_RIGHTBRACE,
		//SDLK_KP_TAB,
		//SDLK_KP_BACKSPACE,
		//SDLK_KP_A,
		//SDLK_KP_B,
		//SDLK_KP_C,
		//SDLK_KP_D,
		//SDLK_KP_E,
		//SDLK_KP_F,
		//SDLK_KP_XOR,
		//SDLK_KP_POWER,
		//SDLK_KP_PERCENT,
		//SDLK_KP_LESS,
		//SDLK_KP_GREATER,
		//SDLK_KP_AMPERSAND,
		//SDLK_KP_DBLAMPERSAND,
		//SDLK_KP_VERTICALBAR,
		//SDLK_KP_DBLVERTICALBAR,
		//SDLK_KP_COLON,
		//SDLK_KP_HASH,
		//SDLK_KP_SPACE,
		//SDLK_KP_AT,
		//SDLK_KP_EXCLAM,
		//SDLK_KP_MEMSTORE,
		//SDLK_KP_MEMRECALL,
		//SDLK_KP_MEMCLEAR,
		//SDLK_KP_MEMADD,
		//SDLK_KP_MEMSUBTRACT,
		//SDLK_KP_MEMMULTIPLY,
		//SDLK_KP_MEMDIVIDE,
		//SDLK_KP_PLUSMINUS,
		//SDLK_KP_CLEAR,
		//SDLK_KP_CLEARENTRY,
		//SDLK_KP_BINARY,
		//SDLK_KP_OCTAL,
		//SDLK_KP_DECIMAL,
		//SDLK_KP_HEXADECIMAL,
		
		LeftCtrl = SDLK_LCTRL,
		LeftShift = SDLK_LSHIFT,
		LeftAlt = SDLK_LALT,
		LeftGui = SDLK_LGUI, // TODO: What is this?
		RightCtrl = SDLK_RCTRL,
		RightShift = SDLK_RSHIFT,
		RightAlt = SDLK_RALT,
		RightGui = SDLK_RGUI, // TODO: What is this?
		
		//SDLK_MODE,
		
		//SDLK_AUDIONEXT,
		//SDLK_AUDIOPREV,
		//SDLK_AUDIOSTOP,
		//SDLK_AUDIOPLAY,
		//SDLK_AUDIOMUTE,
		//SDLK_MEDIASELECT,
		//SDLK_WWW,
		//SDLK_MAIL,
		//SDLK_CALCULATOR,
		//SDLK_COMPUTER,
		//SDLK_AC_SEARCH,
		//SDLK_AC_HOME,
		//SDLK_AC_BACK,
		//SDLK_AC_FORWARD,
		//SDLK_AC_STOP,
		//SDLK_AC_REFRESH,
		//SDLK_AC_BOOKMARKS,
		
		//SDLK_BRIGHTNESSDOWN,
		//SDLK_BRIGHTNESSUP,
		//SDLK_DISPLAYSWITCH,
		//SDLK_KBDILLUMTOGGLE,
		//SDLK_KBDILLUMDOWN,
		//SDLK_KBDILLUMUP,
		//SDLK_EJECT,
		//SDLK_SLEEP,
	};
	
	enum class KeyModifier : uint32
	{
		None = KMOD_NONE,
		LeftShift = KMOD_LSHIFT,
		RightShift = KMOD_RSHIFT,
		LeftCtrl = KMOD_LCTRL,
		RightCtrl = KMOD_RCTRL,
		LeftAlt = KMOD_LALT,
		RightAlt = KMOD_RALT,
		LeftGui = KMOD_LGUI,
		RightGui = KMOD_RGUI,
		//Num = KMOD_NUM,
		//Caps = KMOD_CAPS,
		//KMOD_MODE,
		//KMOD_RESERVED,

		Ctrl = LeftCtrl|RightCtrl,
		Shift = LeftShift|RightShift,
		Alt = LeftAlt|RightAlt,
		Gui = LeftGui|RightGui,
	};
	ENUM_IS_FLAGS(KeyModifier);
	
	
	struct FormattedStream;
	FormattedStream& operator<<(FormattedStream&, Key key);
	FormattedStream& operator<<(FormattedStream&, KeyModifier modifier);
}

#endif
